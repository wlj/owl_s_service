/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.matchmaker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProfileInfo implements org.apache.thrift.TBase<ProfileInfo, ProfileInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileInfo");

  private static final org.apache.thrift.protocol.TField SERVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INPUT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("inputList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("outputList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PRECONDITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("preconditionList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EFFECT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("effectList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField QOS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("qosList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ACTOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("actorList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CATEGORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PROFILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("profileName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField GROUNDING_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groundingName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField WSDL_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("wsdlURI", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProfileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProfileInfoTupleSchemeFactory());
  }

  public String serviceKey; // optional
  public String serviceName; // optional
  public String description; // optional
  public List<IOModel> inputList; // optional
  public List<IOModel> outputList; // optional
  public List<PECRModel> preconditionList; // optional
  public List<PECRModel> effectList; // optional
  public List<PECRModel> context; // optional
  public List<PECRModel> rule; // optional
  public List<QoS> qosList; // optional
  public List<Actor> actorList; // optional
  public List<Category> categoryList; // optional
  public String profileName; // optional
  public String processName; // optional
  public String groundingName; // optional
  public String wsdlURI; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_KEY((short)1, "serviceKey"),
    SERVICE_NAME((short)2, "serviceName"),
    DESCRIPTION((short)3, "description"),
    INPUT_LIST((short)4, "inputList"),
    OUTPUT_LIST((short)5, "outputList"),
    PRECONDITION_LIST((short)6, "preconditionList"),
    EFFECT_LIST((short)7, "effectList"),
    CONTEXT((short)8, "context"),
    RULE((short)9, "rule"),
    QOS_LIST((short)10, "qosList"),
    ACTOR_LIST((short)11, "actorList"),
    CATEGORY_LIST((short)12, "categoryList"),
    PROFILE_NAME((short)13, "profileName"),
    PROCESS_NAME((short)14, "processName"),
    GROUNDING_NAME((short)15, "groundingName"),
    WSDL_URI((short)16, "wsdlURI");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_KEY
          return SERVICE_KEY;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // INPUT_LIST
          return INPUT_LIST;
        case 5: // OUTPUT_LIST
          return OUTPUT_LIST;
        case 6: // PRECONDITION_LIST
          return PRECONDITION_LIST;
        case 7: // EFFECT_LIST
          return EFFECT_LIST;
        case 8: // CONTEXT
          return CONTEXT;
        case 9: // RULE
          return RULE;
        case 10: // QOS_LIST
          return QOS_LIST;
        case 11: // ACTOR_LIST
          return ACTOR_LIST;
        case 12: // CATEGORY_LIST
          return CATEGORY_LIST;
        case 13: // PROFILE_NAME
          return PROFILE_NAME;
        case 14: // PROCESS_NAME
          return PROCESS_NAME;
        case 15: // GROUNDING_NAME
          return GROUNDING_NAME;
        case 16: // WSDL_URI
          return WSDL_URI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SERVICE_KEY,_Fields.SERVICE_NAME,_Fields.DESCRIPTION,_Fields.INPUT_LIST,_Fields.OUTPUT_LIST,_Fields.PRECONDITION_LIST,_Fields.EFFECT_LIST,_Fields.CONTEXT,_Fields.RULE,_Fields.QOS_LIST,_Fields.ACTOR_LIST,_Fields.CATEGORY_LIST,_Fields.PROFILE_NAME,_Fields.PROCESS_NAME,_Fields.GROUNDING_NAME,_Fields.WSDL_URI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("serviceKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_LIST, new org.apache.thrift.meta_data.FieldMetaData("inputList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IOModel.class))));
    tmpMap.put(_Fields.OUTPUT_LIST, new org.apache.thrift.meta_data.FieldMetaData("outputList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IOModel.class))));
    tmpMap.put(_Fields.PRECONDITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("preconditionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PECRModel.class))));
    tmpMap.put(_Fields.EFFECT_LIST, new org.apache.thrift.meta_data.FieldMetaData("effectList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PECRModel.class))));
    tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PECRModel.class))));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PECRModel.class))));
    tmpMap.put(_Fields.QOS_LIST, new org.apache.thrift.meta_data.FieldMetaData("qosList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QoS.class))));
    tmpMap.put(_Fields.ACTOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("actorList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Actor.class))));
    tmpMap.put(_Fields.CATEGORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("categoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Category.class))));
    tmpMap.put(_Fields.PROFILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("profileName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("processName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUNDING_NAME, new org.apache.thrift.meta_data.FieldMetaData("groundingName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WSDL_URI, new org.apache.thrift.meta_data.FieldMetaData("wsdlURI", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileInfo.class, metaDataMap);
  }

  public ProfileInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileInfo(ProfileInfo other) {
    if (other.isSetServiceKey()) {
      this.serviceKey = other.serviceKey;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetInputList()) {
      List<IOModel> __this__inputList = new ArrayList<IOModel>();
      for (IOModel other_element : other.inputList) {
        __this__inputList.add(new IOModel(other_element));
      }
      this.inputList = __this__inputList;
    }
    if (other.isSetOutputList()) {
      List<IOModel> __this__outputList = new ArrayList<IOModel>();
      for (IOModel other_element : other.outputList) {
        __this__outputList.add(new IOModel(other_element));
      }
      this.outputList = __this__outputList;
    }
    if (other.isSetPreconditionList()) {
      List<PECRModel> __this__preconditionList = new ArrayList<PECRModel>();
      for (PECRModel other_element : other.preconditionList) {
        __this__preconditionList.add(new PECRModel(other_element));
      }
      this.preconditionList = __this__preconditionList;
    }
    if (other.isSetEffectList()) {
      List<PECRModel> __this__effectList = new ArrayList<PECRModel>();
      for (PECRModel other_element : other.effectList) {
        __this__effectList.add(new PECRModel(other_element));
      }
      this.effectList = __this__effectList;
    }
    if (other.isSetContext()) {
      List<PECRModel> __this__context = new ArrayList<PECRModel>();
      for (PECRModel other_element : other.context) {
        __this__context.add(new PECRModel(other_element));
      }
      this.context = __this__context;
    }
    if (other.isSetRule()) {
      List<PECRModel> __this__rule = new ArrayList<PECRModel>();
      for (PECRModel other_element : other.rule) {
        __this__rule.add(new PECRModel(other_element));
      }
      this.rule = __this__rule;
    }
    if (other.isSetQosList()) {
      List<QoS> __this__qosList = new ArrayList<QoS>();
      for (QoS other_element : other.qosList) {
        __this__qosList.add(new QoS(other_element));
      }
      this.qosList = __this__qosList;
    }
    if (other.isSetActorList()) {
      List<Actor> __this__actorList = new ArrayList<Actor>();
      for (Actor other_element : other.actorList) {
        __this__actorList.add(new Actor(other_element));
      }
      this.actorList = __this__actorList;
    }
    if (other.isSetCategoryList()) {
      List<Category> __this__categoryList = new ArrayList<Category>();
      for (Category other_element : other.categoryList) {
        __this__categoryList.add(new Category(other_element));
      }
      this.categoryList = __this__categoryList;
    }
    if (other.isSetProfileName()) {
      this.profileName = other.profileName;
    }
    if (other.isSetProcessName()) {
      this.processName = other.processName;
    }
    if (other.isSetGroundingName()) {
      this.groundingName = other.groundingName;
    }
    if (other.isSetWsdlURI()) {
      this.wsdlURI = other.wsdlURI;
    }
  }

  public ProfileInfo deepCopy() {
    return new ProfileInfo(this);
  }

  @Override
  public void clear() {
    this.serviceKey = null;
    this.serviceName = null;
    this.description = null;
    this.inputList = null;
    this.outputList = null;
    this.preconditionList = null;
    this.effectList = null;
    this.context = null;
    this.rule = null;
    this.qosList = null;
    this.actorList = null;
    this.categoryList = null;
    this.profileName = null;
    this.processName = null;
    this.groundingName = null;
    this.wsdlURI = null;
  }

  public String getServiceKey() {
    return this.serviceKey;
  }

  public ProfileInfo setServiceKey(String serviceKey) {
    this.serviceKey = serviceKey;
    return this;
  }

  public void unsetServiceKey() {
    this.serviceKey = null;
  }

  /** Returns true if field serviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceKey() {
    return this.serviceKey != null;
  }

  public void setServiceKeyIsSet(boolean value) {
    if (!value) {
      this.serviceKey = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public ProfileInfo setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ProfileInfo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getInputListSize() {
    return (this.inputList == null) ? 0 : this.inputList.size();
  }

  public java.util.Iterator<IOModel> getInputListIterator() {
    return (this.inputList == null) ? null : this.inputList.iterator();
  }

  public void addToInputList(IOModel elem) {
    if (this.inputList == null) {
      this.inputList = new ArrayList<IOModel>();
    }
    this.inputList.add(elem);
  }

  public List<IOModel> getInputList() {
    return this.inputList;
  }

  public ProfileInfo setInputList(List<IOModel> inputList) {
    this.inputList = inputList;
    return this;
  }

  public void unsetInputList() {
    this.inputList = null;
  }

  /** Returns true if field inputList is set (has been assigned a value) and false otherwise */
  public boolean isSetInputList() {
    return this.inputList != null;
  }

  public void setInputListIsSet(boolean value) {
    if (!value) {
      this.inputList = null;
    }
  }

  public int getOutputListSize() {
    return (this.outputList == null) ? 0 : this.outputList.size();
  }

  public java.util.Iterator<IOModel> getOutputListIterator() {
    return (this.outputList == null) ? null : this.outputList.iterator();
  }

  public void addToOutputList(IOModel elem) {
    if (this.outputList == null) {
      this.outputList = new ArrayList<IOModel>();
    }
    this.outputList.add(elem);
  }

  public List<IOModel> getOutputList() {
    return this.outputList;
  }

  public ProfileInfo setOutputList(List<IOModel> outputList) {
    this.outputList = outputList;
    return this;
  }

  public void unsetOutputList() {
    this.outputList = null;
  }

  /** Returns true if field outputList is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputList() {
    return this.outputList != null;
  }

  public void setOutputListIsSet(boolean value) {
    if (!value) {
      this.outputList = null;
    }
  }

  public int getPreconditionListSize() {
    return (this.preconditionList == null) ? 0 : this.preconditionList.size();
  }

  public java.util.Iterator<PECRModel> getPreconditionListIterator() {
    return (this.preconditionList == null) ? null : this.preconditionList.iterator();
  }

  public void addToPreconditionList(PECRModel elem) {
    if (this.preconditionList == null) {
      this.preconditionList = new ArrayList<PECRModel>();
    }
    this.preconditionList.add(elem);
  }

  public List<PECRModel> getPreconditionList() {
    return this.preconditionList;
  }

  public ProfileInfo setPreconditionList(List<PECRModel> preconditionList) {
    this.preconditionList = preconditionList;
    return this;
  }

  public void unsetPreconditionList() {
    this.preconditionList = null;
  }

  /** Returns true if field preconditionList is set (has been assigned a value) and false otherwise */
  public boolean isSetPreconditionList() {
    return this.preconditionList != null;
  }

  public void setPreconditionListIsSet(boolean value) {
    if (!value) {
      this.preconditionList = null;
    }
  }

  public int getEffectListSize() {
    return (this.effectList == null) ? 0 : this.effectList.size();
  }

  public java.util.Iterator<PECRModel> getEffectListIterator() {
    return (this.effectList == null) ? null : this.effectList.iterator();
  }

  public void addToEffectList(PECRModel elem) {
    if (this.effectList == null) {
      this.effectList = new ArrayList<PECRModel>();
    }
    this.effectList.add(elem);
  }

  public List<PECRModel> getEffectList() {
    return this.effectList;
  }

  public ProfileInfo setEffectList(List<PECRModel> effectList) {
    this.effectList = effectList;
    return this;
  }

  public void unsetEffectList() {
    this.effectList = null;
  }

  /** Returns true if field effectList is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectList() {
    return this.effectList != null;
  }

  public void setEffectListIsSet(boolean value) {
    if (!value) {
      this.effectList = null;
    }
  }

  public int getContextSize() {
    return (this.context == null) ? 0 : this.context.size();
  }

  public java.util.Iterator<PECRModel> getContextIterator() {
    return (this.context == null) ? null : this.context.iterator();
  }

  public void addToContext(PECRModel elem) {
    if (this.context == null) {
      this.context = new ArrayList<PECRModel>();
    }
    this.context.add(elem);
  }

  public List<PECRModel> getContext() {
    return this.context;
  }

  public ProfileInfo setContext(List<PECRModel> context) {
    this.context = context;
    return this;
  }

  public void unsetContext() {
    this.context = null;
  }

  /** Returns true if field context is set (has been assigned a value) and false otherwise */
  public boolean isSetContext() {
    return this.context != null;
  }

  public void setContextIsSet(boolean value) {
    if (!value) {
      this.context = null;
    }
  }

  public int getRuleSize() {
    return (this.rule == null) ? 0 : this.rule.size();
  }

  public java.util.Iterator<PECRModel> getRuleIterator() {
    return (this.rule == null) ? null : this.rule.iterator();
  }

  public void addToRule(PECRModel elem) {
    if (this.rule == null) {
      this.rule = new ArrayList<PECRModel>();
    }
    this.rule.add(elem);
  }

  public List<PECRModel> getRule() {
    return this.rule;
  }

  public ProfileInfo setRule(List<PECRModel> rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public int getQosListSize() {
    return (this.qosList == null) ? 0 : this.qosList.size();
  }

  public java.util.Iterator<QoS> getQosListIterator() {
    return (this.qosList == null) ? null : this.qosList.iterator();
  }

  public void addToQosList(QoS elem) {
    if (this.qosList == null) {
      this.qosList = new ArrayList<QoS>();
    }
    this.qosList.add(elem);
  }

  public List<QoS> getQosList() {
    return this.qosList;
  }

  public ProfileInfo setQosList(List<QoS> qosList) {
    this.qosList = qosList;
    return this;
  }

  public void unsetQosList() {
    this.qosList = null;
  }

  /** Returns true if field qosList is set (has been assigned a value) and false otherwise */
  public boolean isSetQosList() {
    return this.qosList != null;
  }

  public void setQosListIsSet(boolean value) {
    if (!value) {
      this.qosList = null;
    }
  }

  public int getActorListSize() {
    return (this.actorList == null) ? 0 : this.actorList.size();
  }

  public java.util.Iterator<Actor> getActorListIterator() {
    return (this.actorList == null) ? null : this.actorList.iterator();
  }

  public void addToActorList(Actor elem) {
    if (this.actorList == null) {
      this.actorList = new ArrayList<Actor>();
    }
    this.actorList.add(elem);
  }

  public List<Actor> getActorList() {
    return this.actorList;
  }

  public ProfileInfo setActorList(List<Actor> actorList) {
    this.actorList = actorList;
    return this;
  }

  public void unsetActorList() {
    this.actorList = null;
  }

  /** Returns true if field actorList is set (has been assigned a value) and false otherwise */
  public boolean isSetActorList() {
    return this.actorList != null;
  }

  public void setActorListIsSet(boolean value) {
    if (!value) {
      this.actorList = null;
    }
  }

  public int getCategoryListSize() {
    return (this.categoryList == null) ? 0 : this.categoryList.size();
  }

  public java.util.Iterator<Category> getCategoryListIterator() {
    return (this.categoryList == null) ? null : this.categoryList.iterator();
  }

  public void addToCategoryList(Category elem) {
    if (this.categoryList == null) {
      this.categoryList = new ArrayList<Category>();
    }
    this.categoryList.add(elem);
  }

  public List<Category> getCategoryList() {
    return this.categoryList;
  }

  public ProfileInfo setCategoryList(List<Category> categoryList) {
    this.categoryList = categoryList;
    return this;
  }

  public void unsetCategoryList() {
    this.categoryList = null;
  }

  /** Returns true if field categoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryList() {
    return this.categoryList != null;
  }

  public void setCategoryListIsSet(boolean value) {
    if (!value) {
      this.categoryList = null;
    }
  }

  public String getProfileName() {
    return this.profileName;
  }

  public ProfileInfo setProfileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  public void unsetProfileName() {
    this.profileName = null;
  }

  /** Returns true if field profileName is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileName() {
    return this.profileName != null;
  }

  public void setProfileNameIsSet(boolean value) {
    if (!value) {
      this.profileName = null;
    }
  }

  public String getProcessName() {
    return this.processName;
  }

  public ProfileInfo setProcessName(String processName) {
    this.processName = processName;
    return this;
  }

  public void unsetProcessName() {
    this.processName = null;
  }

  /** Returns true if field processName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessName() {
    return this.processName != null;
  }

  public void setProcessNameIsSet(boolean value) {
    if (!value) {
      this.processName = null;
    }
  }

  public String getGroundingName() {
    return this.groundingName;
  }

  public ProfileInfo setGroundingName(String groundingName) {
    this.groundingName = groundingName;
    return this;
  }

  public void unsetGroundingName() {
    this.groundingName = null;
  }

  /** Returns true if field groundingName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroundingName() {
    return this.groundingName != null;
  }

  public void setGroundingNameIsSet(boolean value) {
    if (!value) {
      this.groundingName = null;
    }
  }

  public String getWsdlURI() {
    return this.wsdlURI;
  }

  public ProfileInfo setWsdlURI(String wsdlURI) {
    this.wsdlURI = wsdlURI;
    return this;
  }

  public void unsetWsdlURI() {
    this.wsdlURI = null;
  }

  /** Returns true if field wsdlURI is set (has been assigned a value) and false otherwise */
  public boolean isSetWsdlURI() {
    return this.wsdlURI != null;
  }

  public void setWsdlURIIsSet(boolean value) {
    if (!value) {
      this.wsdlURI = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_KEY:
      if (value == null) {
        unsetServiceKey();
      } else {
        setServiceKey((String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case INPUT_LIST:
      if (value == null) {
        unsetInputList();
      } else {
        setInputList((List<IOModel>)value);
      }
      break;

    case OUTPUT_LIST:
      if (value == null) {
        unsetOutputList();
      } else {
        setOutputList((List<IOModel>)value);
      }
      break;

    case PRECONDITION_LIST:
      if (value == null) {
        unsetPreconditionList();
      } else {
        setPreconditionList((List<PECRModel>)value);
      }
      break;

    case EFFECT_LIST:
      if (value == null) {
        unsetEffectList();
      } else {
        setEffectList((List<PECRModel>)value);
      }
      break;

    case CONTEXT:
      if (value == null) {
        unsetContext();
      } else {
        setContext((List<PECRModel>)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((List<PECRModel>)value);
      }
      break;

    case QOS_LIST:
      if (value == null) {
        unsetQosList();
      } else {
        setQosList((List<QoS>)value);
      }
      break;

    case ACTOR_LIST:
      if (value == null) {
        unsetActorList();
      } else {
        setActorList((List<Actor>)value);
      }
      break;

    case CATEGORY_LIST:
      if (value == null) {
        unsetCategoryList();
      } else {
        setCategoryList((List<Category>)value);
      }
      break;

    case PROFILE_NAME:
      if (value == null) {
        unsetProfileName();
      } else {
        setProfileName((String)value);
      }
      break;

    case PROCESS_NAME:
      if (value == null) {
        unsetProcessName();
      } else {
        setProcessName((String)value);
      }
      break;

    case GROUNDING_NAME:
      if (value == null) {
        unsetGroundingName();
      } else {
        setGroundingName((String)value);
      }
      break;

    case WSDL_URI:
      if (value == null) {
        unsetWsdlURI();
      } else {
        setWsdlURI((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_KEY:
      return getServiceKey();

    case SERVICE_NAME:
      return getServiceName();

    case DESCRIPTION:
      return getDescription();

    case INPUT_LIST:
      return getInputList();

    case OUTPUT_LIST:
      return getOutputList();

    case PRECONDITION_LIST:
      return getPreconditionList();

    case EFFECT_LIST:
      return getEffectList();

    case CONTEXT:
      return getContext();

    case RULE:
      return getRule();

    case QOS_LIST:
      return getQosList();

    case ACTOR_LIST:
      return getActorList();

    case CATEGORY_LIST:
      return getCategoryList();

    case PROFILE_NAME:
      return getProfileName();

    case PROCESS_NAME:
      return getProcessName();

    case GROUNDING_NAME:
      return getGroundingName();

    case WSDL_URI:
      return getWsdlURI();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_KEY:
      return isSetServiceKey();
    case SERVICE_NAME:
      return isSetServiceName();
    case DESCRIPTION:
      return isSetDescription();
    case INPUT_LIST:
      return isSetInputList();
    case OUTPUT_LIST:
      return isSetOutputList();
    case PRECONDITION_LIST:
      return isSetPreconditionList();
    case EFFECT_LIST:
      return isSetEffectList();
    case CONTEXT:
      return isSetContext();
    case RULE:
      return isSetRule();
    case QOS_LIST:
      return isSetQosList();
    case ACTOR_LIST:
      return isSetActorList();
    case CATEGORY_LIST:
      return isSetCategoryList();
    case PROFILE_NAME:
      return isSetProfileName();
    case PROCESS_NAME:
      return isSetProcessName();
    case GROUNDING_NAME:
      return isSetGroundingName();
    case WSDL_URI:
      return isSetWsdlURI();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileInfo)
      return this.equals((ProfileInfo)that);
    return false;
  }

  public boolean equals(ProfileInfo that) {
    if (that == null)
      return false;

    boolean this_present_serviceKey = true && this.isSetServiceKey();
    boolean that_present_serviceKey = true && that.isSetServiceKey();
    if (this_present_serviceKey || that_present_serviceKey) {
      if (!(this_present_serviceKey && that_present_serviceKey))
        return false;
      if (!this.serviceKey.equals(that.serviceKey))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_inputList = true && this.isSetInputList();
    boolean that_present_inputList = true && that.isSetInputList();
    if (this_present_inputList || that_present_inputList) {
      if (!(this_present_inputList && that_present_inputList))
        return false;
      if (!this.inputList.equals(that.inputList))
        return false;
    }

    boolean this_present_outputList = true && this.isSetOutputList();
    boolean that_present_outputList = true && that.isSetOutputList();
    if (this_present_outputList || that_present_outputList) {
      if (!(this_present_outputList && that_present_outputList))
        return false;
      if (!this.outputList.equals(that.outputList))
        return false;
    }

    boolean this_present_preconditionList = true && this.isSetPreconditionList();
    boolean that_present_preconditionList = true && that.isSetPreconditionList();
    if (this_present_preconditionList || that_present_preconditionList) {
      if (!(this_present_preconditionList && that_present_preconditionList))
        return false;
      if (!this.preconditionList.equals(that.preconditionList))
        return false;
    }

    boolean this_present_effectList = true && this.isSetEffectList();
    boolean that_present_effectList = true && that.isSetEffectList();
    if (this_present_effectList || that_present_effectList) {
      if (!(this_present_effectList && that_present_effectList))
        return false;
      if (!this.effectList.equals(that.effectList))
        return false;
    }

    boolean this_present_context = true && this.isSetContext();
    boolean that_present_context = true && that.isSetContext();
    if (this_present_context || that_present_context) {
      if (!(this_present_context && that_present_context))
        return false;
      if (!this.context.equals(that.context))
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    boolean this_present_qosList = true && this.isSetQosList();
    boolean that_present_qosList = true && that.isSetQosList();
    if (this_present_qosList || that_present_qosList) {
      if (!(this_present_qosList && that_present_qosList))
        return false;
      if (!this.qosList.equals(that.qosList))
        return false;
    }

    boolean this_present_actorList = true && this.isSetActorList();
    boolean that_present_actorList = true && that.isSetActorList();
    if (this_present_actorList || that_present_actorList) {
      if (!(this_present_actorList && that_present_actorList))
        return false;
      if (!this.actorList.equals(that.actorList))
        return false;
    }

    boolean this_present_categoryList = true && this.isSetCategoryList();
    boolean that_present_categoryList = true && that.isSetCategoryList();
    if (this_present_categoryList || that_present_categoryList) {
      if (!(this_present_categoryList && that_present_categoryList))
        return false;
      if (!this.categoryList.equals(that.categoryList))
        return false;
    }

    boolean this_present_profileName = true && this.isSetProfileName();
    boolean that_present_profileName = true && that.isSetProfileName();
    if (this_present_profileName || that_present_profileName) {
      if (!(this_present_profileName && that_present_profileName))
        return false;
      if (!this.profileName.equals(that.profileName))
        return false;
    }

    boolean this_present_processName = true && this.isSetProcessName();
    boolean that_present_processName = true && that.isSetProcessName();
    if (this_present_processName || that_present_processName) {
      if (!(this_present_processName && that_present_processName))
        return false;
      if (!this.processName.equals(that.processName))
        return false;
    }

    boolean this_present_groundingName = true && this.isSetGroundingName();
    boolean that_present_groundingName = true && that.isSetGroundingName();
    if (this_present_groundingName || that_present_groundingName) {
      if (!(this_present_groundingName && that_present_groundingName))
        return false;
      if (!this.groundingName.equals(that.groundingName))
        return false;
    }

    boolean this_present_wsdlURI = true && this.isSetWsdlURI();
    boolean that_present_wsdlURI = true && that.isSetWsdlURI();
    if (this_present_wsdlURI || that_present_wsdlURI) {
      if (!(this_present_wsdlURI && that_present_wsdlURI))
        return false;
      if (!this.wsdlURI.equals(that.wsdlURI))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ProfileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProfileInfo typedOther = (ProfileInfo)other;

    lastComparison = Boolean.valueOf(isSetServiceKey()).compareTo(typedOther.isSetServiceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceKey, typedOther.serviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputList()).compareTo(typedOther.isSetInputList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputList, typedOther.inputList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputList()).compareTo(typedOther.isSetOutputList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputList, typedOther.outputList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreconditionList()).compareTo(typedOther.isSetPreconditionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreconditionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preconditionList, typedOther.preconditionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectList()).compareTo(typedOther.isSetEffectList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectList, typedOther.effectList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQosList()).compareTo(typedOther.isSetQosList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQosList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qosList, typedOther.qosList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorList()).compareTo(typedOther.isSetActorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorList, typedOther.actorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryList()).compareTo(typedOther.isSetCategoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryList, typedOther.categoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileName()).compareTo(typedOther.isSetProfileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileName, typedOther.profileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessName()).compareTo(typedOther.isSetProcessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processName, typedOther.processName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroundingName()).compareTo(typedOther.isSetGroundingName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroundingName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groundingName, typedOther.groundingName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWsdlURI()).compareTo(typedOther.isSetWsdlURI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWsdlURI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wsdlURI, typedOther.wsdlURI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileInfo(");
    boolean first = true;

    if (isSetServiceKey()) {
      sb.append("serviceKey:");
      if (this.serviceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceKey);
      }
      first = false;
    }
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetInputList()) {
      if (!first) sb.append(", ");
      sb.append("inputList:");
      if (this.inputList == null) {
        sb.append("null");
      } else {
        sb.append(this.inputList);
      }
      first = false;
    }
    if (isSetOutputList()) {
      if (!first) sb.append(", ");
      sb.append("outputList:");
      if (this.outputList == null) {
        sb.append("null");
      } else {
        sb.append(this.outputList);
      }
      first = false;
    }
    if (isSetPreconditionList()) {
      if (!first) sb.append(", ");
      sb.append("preconditionList:");
      if (this.preconditionList == null) {
        sb.append("null");
      } else {
        sb.append(this.preconditionList);
      }
      first = false;
    }
    if (isSetEffectList()) {
      if (!first) sb.append(", ");
      sb.append("effectList:");
      if (this.effectList == null) {
        sb.append("null");
      } else {
        sb.append(this.effectList);
      }
      first = false;
    }
    if (isSetContext()) {
      if (!first) sb.append(", ");
      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
    }
    if (isSetRule()) {
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
    }
    if (isSetQosList()) {
      if (!first) sb.append(", ");
      sb.append("qosList:");
      if (this.qosList == null) {
        sb.append("null");
      } else {
        sb.append(this.qosList);
      }
      first = false;
    }
    if (isSetActorList()) {
      if (!first) sb.append(", ");
      sb.append("actorList:");
      if (this.actorList == null) {
        sb.append("null");
      } else {
        sb.append(this.actorList);
      }
      first = false;
    }
    if (isSetCategoryList()) {
      if (!first) sb.append(", ");
      sb.append("categoryList:");
      if (this.categoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryList);
      }
      first = false;
    }
    if (isSetProfileName()) {
      if (!first) sb.append(", ");
      sb.append("profileName:");
      if (this.profileName == null) {
        sb.append("null");
      } else {
        sb.append(this.profileName);
      }
      first = false;
    }
    if (isSetProcessName()) {
      if (!first) sb.append(", ");
      sb.append("processName:");
      if (this.processName == null) {
        sb.append("null");
      } else {
        sb.append(this.processName);
      }
      first = false;
    }
    if (isSetGroundingName()) {
      if (!first) sb.append(", ");
      sb.append("groundingName:");
      if (this.groundingName == null) {
        sb.append("null");
      } else {
        sb.append(this.groundingName);
      }
      first = false;
    }
    if (isSetWsdlURI()) {
      if (!first) sb.append(", ");
      sb.append("wsdlURI:");
      if (this.wsdlURI == null) {
        sb.append("null");
      } else {
        sb.append(this.wsdlURI);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileInfoStandardSchemeFactory implements SchemeFactory {
    public ProfileInfoStandardScheme getScheme() {
      return new ProfileInfoStandardScheme();
    }
  }

  private static class ProfileInfoStandardScheme extends StandardScheme<ProfileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceKey = iprot.readString();
              struct.setServiceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INPUT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.inputList = new ArrayList<IOModel>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  IOModel _elem2; // required
                  _elem2 = new IOModel();
                  _elem2.read(iprot);
                  struct.inputList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setInputListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.outputList = new ArrayList<IOModel>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  IOModel _elem5; // required
                  _elem5 = new IOModel();
                  _elem5.read(iprot);
                  struct.outputList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setOutputListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRECONDITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.preconditionList = new ArrayList<PECRModel>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  PECRModel _elem8; // required
                  _elem8 = new PECRModel();
                  _elem8.read(iprot);
                  struct.preconditionList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setPreconditionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EFFECT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.effectList = new ArrayList<PECRModel>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  PECRModel _elem11; // required
                  _elem11 = new PECRModel();
                  _elem11.read(iprot);
                  struct.effectList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setEffectListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.context = new ArrayList<PECRModel>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  PECRModel _elem14; // required
                  _elem14 = new PECRModel();
                  _elem14.read(iprot);
                  struct.context.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.rule = new ArrayList<PECRModel>(_list15.size);
                for (int _i16 = 0; _i16 < _list15.size; ++_i16)
                {
                  PECRModel _elem17; // required
                  _elem17 = new PECRModel();
                  _elem17.read(iprot);
                  struct.rule.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QOS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.qosList = new ArrayList<QoS>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  QoS _elem20; // required
                  _elem20 = new QoS();
                  _elem20.read(iprot);
                  struct.qosList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setQosListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.actorList = new ArrayList<Actor>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  Actor _elem23; // required
                  _elem23 = new Actor();
                  _elem23.read(iprot);
                  struct.actorList.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setActorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.categoryList = new ArrayList<Category>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  Category _elem26; // required
                  _elem26 = new Category();
                  _elem26.read(iprot);
                  struct.categoryList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setCategoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROFILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileName = iprot.readString();
              struct.setProfileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processName = iprot.readString();
              struct.setProcessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GROUNDING_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groundingName = iprot.readString();
              struct.setGroundingNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // WSDL_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wsdlURI = iprot.readString();
              struct.setWsdlURIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceKey != null) {
        if (struct.isSetServiceKey()) {
          oprot.writeFieldBegin(SERVICE_KEY_FIELD_DESC);
          oprot.writeString(struct.serviceKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inputList != null) {
        if (struct.isSetInputList()) {
          oprot.writeFieldBegin(INPUT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inputList.size()));
            for (IOModel _iter27 : struct.inputList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outputList != null) {
        if (struct.isSetOutputList()) {
          oprot.writeFieldBegin(OUTPUT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outputList.size()));
            for (IOModel _iter28 : struct.outputList)
            {
              _iter28.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preconditionList != null) {
        if (struct.isSetPreconditionList()) {
          oprot.writeFieldBegin(PRECONDITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.preconditionList.size()));
            for (PECRModel _iter29 : struct.preconditionList)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.effectList != null) {
        if (struct.isSetEffectList()) {
          oprot.writeFieldBegin(EFFECT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.effectList.size()));
            for (PECRModel _iter30 : struct.effectList)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.context != null) {
        if (struct.isSetContext()) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.context.size()));
            for (PECRModel _iter31 : struct.context)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rule != null) {
        if (struct.isSetRule()) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rule.size()));
            for (PECRModel _iter32 : struct.rule)
            {
              _iter32.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.qosList != null) {
        if (struct.isSetQosList()) {
          oprot.writeFieldBegin(QOS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qosList.size()));
            for (QoS _iter33 : struct.qosList)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.actorList != null) {
        if (struct.isSetActorList()) {
          oprot.writeFieldBegin(ACTOR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actorList.size()));
            for (Actor _iter34 : struct.actorList)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.categoryList != null) {
        if (struct.isSetCategoryList()) {
          oprot.writeFieldBegin(CATEGORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.categoryList.size()));
            for (Category _iter35 : struct.categoryList)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.profileName != null) {
        if (struct.isSetProfileName()) {
          oprot.writeFieldBegin(PROFILE_NAME_FIELD_DESC);
          oprot.writeString(struct.profileName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processName != null) {
        if (struct.isSetProcessName()) {
          oprot.writeFieldBegin(PROCESS_NAME_FIELD_DESC);
          oprot.writeString(struct.processName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groundingName != null) {
        if (struct.isSetGroundingName()) {
          oprot.writeFieldBegin(GROUNDING_NAME_FIELD_DESC);
          oprot.writeString(struct.groundingName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wsdlURI != null) {
        if (struct.isSetWsdlURI()) {
          oprot.writeFieldBegin(WSDL_URI_FIELD_DESC);
          oprot.writeString(struct.wsdlURI);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileInfoTupleSchemeFactory implements SchemeFactory {
    public ProfileInfoTupleScheme getScheme() {
      return new ProfileInfoTupleScheme();
    }
  }

  private static class ProfileInfoTupleScheme extends TupleScheme<ProfileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServiceKey()) {
        optionals.set(0);
      }
      if (struct.isSetServiceName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetInputList()) {
        optionals.set(3);
      }
      if (struct.isSetOutputList()) {
        optionals.set(4);
      }
      if (struct.isSetPreconditionList()) {
        optionals.set(5);
      }
      if (struct.isSetEffectList()) {
        optionals.set(6);
      }
      if (struct.isSetContext()) {
        optionals.set(7);
      }
      if (struct.isSetRule()) {
        optionals.set(8);
      }
      if (struct.isSetQosList()) {
        optionals.set(9);
      }
      if (struct.isSetActorList()) {
        optionals.set(10);
      }
      if (struct.isSetCategoryList()) {
        optionals.set(11);
      }
      if (struct.isSetProfileName()) {
        optionals.set(12);
      }
      if (struct.isSetProcessName()) {
        optionals.set(13);
      }
      if (struct.isSetGroundingName()) {
        optionals.set(14);
      }
      if (struct.isSetWsdlURI()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetServiceKey()) {
        oprot.writeString(struct.serviceKey);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetInputList()) {
        {
          oprot.writeI32(struct.inputList.size());
          for (IOModel _iter36 : struct.inputList)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetOutputList()) {
        {
          oprot.writeI32(struct.outputList.size());
          for (IOModel _iter37 : struct.outputList)
          {
            _iter37.write(oprot);
          }
        }
      }
      if (struct.isSetPreconditionList()) {
        {
          oprot.writeI32(struct.preconditionList.size());
          for (PECRModel _iter38 : struct.preconditionList)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetEffectList()) {
        {
          oprot.writeI32(struct.effectList.size());
          for (PECRModel _iter39 : struct.effectList)
          {
            _iter39.write(oprot);
          }
        }
      }
      if (struct.isSetContext()) {
        {
          oprot.writeI32(struct.context.size());
          for (PECRModel _iter40 : struct.context)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetRule()) {
        {
          oprot.writeI32(struct.rule.size());
          for (PECRModel _iter41 : struct.rule)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetQosList()) {
        {
          oprot.writeI32(struct.qosList.size());
          for (QoS _iter42 : struct.qosList)
          {
            _iter42.write(oprot);
          }
        }
      }
      if (struct.isSetActorList()) {
        {
          oprot.writeI32(struct.actorList.size());
          for (Actor _iter43 : struct.actorList)
          {
            _iter43.write(oprot);
          }
        }
      }
      if (struct.isSetCategoryList()) {
        {
          oprot.writeI32(struct.categoryList.size());
          for (Category _iter44 : struct.categoryList)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetProfileName()) {
        oprot.writeString(struct.profileName);
      }
      if (struct.isSetProcessName()) {
        oprot.writeString(struct.processName);
      }
      if (struct.isSetGroundingName()) {
        oprot.writeString(struct.groundingName);
      }
      if (struct.isSetWsdlURI()) {
        oprot.writeString(struct.wsdlURI);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.serviceKey = iprot.readString();
        struct.setServiceKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inputList = new ArrayList<IOModel>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            IOModel _elem47; // required
            _elem47 = new IOModel();
            _elem47.read(iprot);
            struct.inputList.add(_elem47);
          }
        }
        struct.setInputListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outputList = new ArrayList<IOModel>(_list48.size);
          for (int _i49 = 0; _i49 < _list48.size; ++_i49)
          {
            IOModel _elem50; // required
            _elem50 = new IOModel();
            _elem50.read(iprot);
            struct.outputList.add(_elem50);
          }
        }
        struct.setOutputListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.preconditionList = new ArrayList<PECRModel>(_list51.size);
          for (int _i52 = 0; _i52 < _list51.size; ++_i52)
          {
            PECRModel _elem53; // required
            _elem53 = new PECRModel();
            _elem53.read(iprot);
            struct.preconditionList.add(_elem53);
          }
        }
        struct.setPreconditionListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.effectList = new ArrayList<PECRModel>(_list54.size);
          for (int _i55 = 0; _i55 < _list54.size; ++_i55)
          {
            PECRModel _elem56; // required
            _elem56 = new PECRModel();
            _elem56.read(iprot);
            struct.effectList.add(_elem56);
          }
        }
        struct.setEffectListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.context = new ArrayList<PECRModel>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            PECRModel _elem59; // required
            _elem59 = new PECRModel();
            _elem59.read(iprot);
            struct.context.add(_elem59);
          }
        }
        struct.setContextIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rule = new ArrayList<PECRModel>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            PECRModel _elem62; // required
            _elem62 = new PECRModel();
            _elem62.read(iprot);
            struct.rule.add(_elem62);
          }
        }
        struct.setRuleIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.qosList = new ArrayList<QoS>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            QoS _elem65; // required
            _elem65 = new QoS();
            _elem65.read(iprot);
            struct.qosList.add(_elem65);
          }
        }
        struct.setQosListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actorList = new ArrayList<Actor>(_list66.size);
          for (int _i67 = 0; _i67 < _list66.size; ++_i67)
          {
            Actor _elem68; // required
            _elem68 = new Actor();
            _elem68.read(iprot);
            struct.actorList.add(_elem68);
          }
        }
        struct.setActorListIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.categoryList = new ArrayList<Category>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            Category _elem71; // required
            _elem71 = new Category();
            _elem71.read(iprot);
            struct.categoryList.add(_elem71);
          }
        }
        struct.setCategoryListIsSet(true);
      }
      if (incoming.get(12)) {
        struct.profileName = iprot.readString();
        struct.setProfileNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.processName = iprot.readString();
        struct.setProcessNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.groundingName = iprot.readString();
        struct.setGroundingNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.wsdlURI = iprot.readString();
        struct.setWsdlURIIsSet(true);
      }
    }
  }

}


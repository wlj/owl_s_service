/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.matchmaker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResponseInfo implements org.apache.thrift.TBase<ResponseInfo, ResponseInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseInfo");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("taskServices", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseInfoTupleSchemeFactory());
  }

  public int status; // required
  public Map<String,List<ProfileInfo>> taskServices; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    TASK_SERVICES((short)2, "taskServices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // TASK_SERVICES
          return TASK_SERVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TASK_SERVICES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_SERVICES, new org.apache.thrift.meta_data.FieldMetaData("taskServices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileInfo.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseInfo.class, metaDataMap);
  }

  public ResponseInfo() {
  }

  public ResponseInfo(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseInfo(ResponseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetTaskServices()) {
      Map<String,List<ProfileInfo>> __this__taskServices = new HashMap<String,List<ProfileInfo>>();
      for (Map.Entry<String, List<ProfileInfo>> other_element : other.taskServices.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ProfileInfo> other_element_value = other_element.getValue();

        String __this__taskServices_copy_key = other_element_key;

        List<ProfileInfo> __this__taskServices_copy_value = new ArrayList<ProfileInfo>();
        for (ProfileInfo other_element_value_element : other_element_value) {
          __this__taskServices_copy_value.add(new ProfileInfo(other_element_value_element));
        }

        __this__taskServices.put(__this__taskServices_copy_key, __this__taskServices_copy_value);
      }
      this.taskServices = __this__taskServices;
    }
  }

  public ResponseInfo deepCopy() {
    return new ResponseInfo(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.taskServices = null;
  }

  public int getStatus() {
    return this.status;
  }

  public ResponseInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getTaskServicesSize() {
    return (this.taskServices == null) ? 0 : this.taskServices.size();
  }

  public void putToTaskServices(String key, List<ProfileInfo> val) {
    if (this.taskServices == null) {
      this.taskServices = new HashMap<String,List<ProfileInfo>>();
    }
    this.taskServices.put(key, val);
  }

  public Map<String,List<ProfileInfo>> getTaskServices() {
    return this.taskServices;
  }

  public ResponseInfo setTaskServices(Map<String,List<ProfileInfo>> taskServices) {
    this.taskServices = taskServices;
    return this;
  }

  public void unsetTaskServices() {
    this.taskServices = null;
  }

  /** Returns true if field taskServices is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskServices() {
    return this.taskServices != null;
  }

  public void setTaskServicesIsSet(boolean value) {
    if (!value) {
      this.taskServices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case TASK_SERVICES:
      if (value == null) {
        unsetTaskServices();
      } else {
        setTaskServices((Map<String,List<ProfileInfo>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case TASK_SERVICES:
      return getTaskServices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case TASK_SERVICES:
      return isSetTaskServices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseInfo)
      return this.equals((ResponseInfo)that);
    return false;
  }

  public boolean equals(ResponseInfo that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_taskServices = true && this.isSetTaskServices();
    boolean that_present_taskServices = true && that.isSetTaskServices();
    if (this_present_taskServices || that_present_taskServices) {
      if (!(this_present_taskServices && that_present_taskServices))
        return false;
      if (!this.taskServices.equals(that.taskServices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ResponseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ResponseInfo typedOther = (ResponseInfo)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskServices()).compareTo(typedOther.isSetTaskServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskServices, typedOther.taskServices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseInfo(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetTaskServices()) {
      if (!first) sb.append(", ");
      sb.append("taskServices:");
      if (this.taskServices == null) {
        sb.append("null");
      } else {
        sb.append(this.taskServices);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseInfoStandardSchemeFactory implements SchemeFactory {
    public ResponseInfoStandardScheme getScheme() {
      return new ResponseInfoStandardScheme();
    }
  }

  private static class ResponseInfoStandardScheme extends StandardScheme<ResponseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.taskServices = new HashMap<String,List<ProfileInfo>>(2*_map80.size);
                for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                {
                  String _key82; // required
                  List<ProfileInfo> _val83; // required
                  _key82 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                    _val83 = new ArrayList<ProfileInfo>(_list84.size);
                    for (int _i85 = 0; _i85 < _list84.size; ++_i85)
                    {
                      ProfileInfo _elem86; // required
                      _elem86 = new ProfileInfo();
                      _elem86.read(iprot);
                      _val83.add(_elem86);
                    }
                    iprot.readListEnd();
                  }
                  struct.taskServices.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setTaskServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.taskServices != null) {
        if (struct.isSetTaskServices()) {
          oprot.writeFieldBegin(TASK_SERVICES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.taskServices.size()));
            for (Map.Entry<String, List<ProfileInfo>> _iter87 : struct.taskServices.entrySet())
            {
              oprot.writeString(_iter87.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter87.getValue().size()));
                for (ProfileInfo _iter88 : _iter87.getValue())
                {
                  _iter88.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseInfoTupleSchemeFactory implements SchemeFactory {
    public ResponseInfoTupleScheme getScheme() {
      return new ResponseInfoTupleScheme();
    }
  }

  private static class ResponseInfoTupleScheme extends TupleScheme<ResponseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetTaskServices()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTaskServices()) {
        {
          oprot.writeI32(struct.taskServices.size());
          for (Map.Entry<String, List<ProfileInfo>> _iter89 : struct.taskServices.entrySet())
          {
            oprot.writeString(_iter89.getKey());
            {
              oprot.writeI32(_iter89.getValue().size());
              for (ProfileInfo _iter90 : _iter89.getValue())
              {
                _iter90.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map91 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.taskServices = new HashMap<String,List<ProfileInfo>>(2*_map91.size);
          for (int _i92 = 0; _i92 < _map91.size; ++_i92)
          {
            String _key93; // required
            List<ProfileInfo> _val94; // required
            _key93 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val94 = new ArrayList<ProfileInfo>(_list95.size);
              for (int _i96 = 0; _i96 < _list95.size; ++_i96)
              {
                ProfileInfo _elem97; // required
                _elem97 = new ProfileInfo();
                _elem97.read(iprot);
                _val94.add(_elem97);
              }
            }
            struct.taskServices.put(_key93, _val94);
          }
        }
        struct.setTaskServicesIsSet(true);
      }
    }
  }

}


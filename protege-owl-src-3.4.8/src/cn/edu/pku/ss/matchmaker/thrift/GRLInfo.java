/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.matchmaker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GRLInfo implements org.apache.thrift.TBase<GRLInfo, GRLInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GRLInfo");

  private static final org.apache.thrift.protocol.TField GRL_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("grlURI", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GRL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("grlContent", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GRLInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GRLInfoTupleSchemeFactory());
  }

  public String grlURI; // optional
  public String grlContent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GRL_URI((short)1, "grlURI"),
    GRL_CONTENT((short)2, "grlContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GRL_URI
          return GRL_URI;
        case 2: // GRL_CONTENT
          return GRL_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GRL_URI,_Fields.GRL_CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GRL_URI, new org.apache.thrift.meta_data.FieldMetaData("grlURI", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("grlContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GRLInfo.class, metaDataMap);
  }

  public GRLInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GRLInfo(GRLInfo other) {
    if (other.isSetGrlURI()) {
      this.grlURI = other.grlURI;
    }
    if (other.isSetGrlContent()) {
      this.grlContent = other.grlContent;
    }
  }

  public GRLInfo deepCopy() {
    return new GRLInfo(this);
  }

  @Override
  public void clear() {
    this.grlURI = null;
    this.grlContent = null;
  }

  public String getGrlURI() {
    return this.grlURI;
  }

  public GRLInfo setGrlURI(String grlURI) {
    this.grlURI = grlURI;
    return this;
  }

  public void unsetGrlURI() {
    this.grlURI = null;
  }

  /** Returns true if field grlURI is set (has been assigned a value) and false otherwise */
  public boolean isSetGrlURI() {
    return this.grlURI != null;
  }

  public void setGrlURIIsSet(boolean value) {
    if (!value) {
      this.grlURI = null;
    }
  }

  public String getGrlContent() {
    return this.grlContent;
  }

  public GRLInfo setGrlContent(String grlContent) {
    this.grlContent = grlContent;
    return this;
  }

  public void unsetGrlContent() {
    this.grlContent = null;
  }

  /** Returns true if field grlContent is set (has been assigned a value) and false otherwise */
  public boolean isSetGrlContent() {
    return this.grlContent != null;
  }

  public void setGrlContentIsSet(boolean value) {
    if (!value) {
      this.grlContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GRL_URI:
      if (value == null) {
        unsetGrlURI();
      } else {
        setGrlURI((String)value);
      }
      break;

    case GRL_CONTENT:
      if (value == null) {
        unsetGrlContent();
      } else {
        setGrlContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GRL_URI:
      return getGrlURI();

    case GRL_CONTENT:
      return getGrlContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GRL_URI:
      return isSetGrlURI();
    case GRL_CONTENT:
      return isSetGrlContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GRLInfo)
      return this.equals((GRLInfo)that);
    return false;
  }

  public boolean equals(GRLInfo that) {
    if (that == null)
      return false;

    boolean this_present_grlURI = true && this.isSetGrlURI();
    boolean that_present_grlURI = true && that.isSetGrlURI();
    if (this_present_grlURI || that_present_grlURI) {
      if (!(this_present_grlURI && that_present_grlURI))
        return false;
      if (!this.grlURI.equals(that.grlURI))
        return false;
    }

    boolean this_present_grlContent = true && this.isSetGrlContent();
    boolean that_present_grlContent = true && that.isSetGrlContent();
    if (this_present_grlContent || that_present_grlContent) {
      if (!(this_present_grlContent && that_present_grlContent))
        return false;
      if (!this.grlContent.equals(that.grlContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GRLInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GRLInfo typedOther = (GRLInfo)other;

    lastComparison = Boolean.valueOf(isSetGrlURI()).compareTo(typedOther.isSetGrlURI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrlURI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grlURI, typedOther.grlURI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrlContent()).compareTo(typedOther.isSetGrlContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrlContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grlContent, typedOther.grlContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GRLInfo(");
    boolean first = true;

    if (isSetGrlURI()) {
      sb.append("grlURI:");
      if (this.grlURI == null) {
        sb.append("null");
      } else {
        sb.append(this.grlURI);
      }
      first = false;
    }
    if (isSetGrlContent()) {
      if (!first) sb.append(", ");
      sb.append("grlContent:");
      if (this.grlContent == null) {
        sb.append("null");
      } else {
        sb.append(this.grlContent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GRLInfoStandardSchemeFactory implements SchemeFactory {
    public GRLInfoStandardScheme getScheme() {
      return new GRLInfoStandardScheme();
    }
  }

  private static class GRLInfoStandardScheme extends StandardScheme<GRLInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GRLInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GRL_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grlURI = iprot.readString();
              struct.setGrlURIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grlContent = iprot.readString();
              struct.setGrlContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GRLInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grlURI != null) {
        if (struct.isSetGrlURI()) {
          oprot.writeFieldBegin(GRL_URI_FIELD_DESC);
          oprot.writeString(struct.grlURI);
          oprot.writeFieldEnd();
        }
      }
      if (struct.grlContent != null) {
        if (struct.isSetGrlContent()) {
          oprot.writeFieldBegin(GRL_CONTENT_FIELD_DESC);
          oprot.writeString(struct.grlContent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GRLInfoTupleSchemeFactory implements SchemeFactory {
    public GRLInfoTupleScheme getScheme() {
      return new GRLInfoTupleScheme();
    }
  }

  private static class GRLInfoTupleScheme extends TupleScheme<GRLInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GRLInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGrlURI()) {
        optionals.set(0);
      }
      if (struct.isSetGrlContent()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGrlURI()) {
        oprot.writeString(struct.grlURI);
      }
      if (struct.isSetGrlContent()) {
        oprot.writeString(struct.grlContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GRLInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.grlURI = iprot.readString();
        struct.setGrlURIIsSet(true);
      }
      if (incoming.get(1)) {
        struct.grlContent = iprot.readString();
        struct.setGrlContentIsSet(true);
      }
    }
  }

}


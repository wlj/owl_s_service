/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.matchmaker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskInfo implements org.apache.thrift.TBase<TaskInfo, TaskInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskInfo");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWLS_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("owlsURI", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWLS_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("owlsContent", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("profileInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskInfoTupleSchemeFactory());
  }

  public String taskID; // required
  public String owlsURI; // optional
  public String owlsContent; // optional
  public ProfileInfo profileInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskID"),
    OWLS_URI((short)2, "owlsURI"),
    OWLS_CONTENT((short)3, "owlsContent"),
    PROFILE_INFO((short)4, "profileInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // OWLS_URI
          return OWLS_URI;
        case 3: // OWLS_CONTENT
          return OWLS_CONTENT;
        case 4: // PROFILE_INFO
          return PROFILE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.OWLS_URI,_Fields.OWLS_CONTENT,_Fields.PROFILE_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWLS_URI, new org.apache.thrift.meta_data.FieldMetaData("owlsURI", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWLS_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("owlsContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_INFO, new org.apache.thrift.meta_data.FieldMetaData("profileInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskInfo.class, metaDataMap);
  }

  public TaskInfo() {
  }

  public TaskInfo(
    String taskID)
  {
    this();
    this.taskID = taskID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskInfo(TaskInfo other) {
    if (other.isSetTaskID()) {
      this.taskID = other.taskID;
    }
    if (other.isSetOwlsURI()) {
      this.owlsURI = other.owlsURI;
    }
    if (other.isSetOwlsContent()) {
      this.owlsContent = other.owlsContent;
    }
    if (other.isSetProfileInfo()) {
      this.profileInfo = new ProfileInfo(other.profileInfo);
    }
  }

  public TaskInfo deepCopy() {
    return new TaskInfo(this);
  }

  public void clear() {
    this.taskID = null;
    this.owlsURI = null;
    this.owlsContent = null;
    this.profileInfo = null;
  }

  public String getTaskID() {
    return this.taskID;
  }

  public TaskInfo setTaskID(String taskID) {
    this.taskID = taskID;
    return this;
  }

  public void unsetTaskID() {
    this.taskID = null;
  }

  /** Returns true if field taskID is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskID() {
    return this.taskID != null;
  }

  public void setTaskIDIsSet(boolean value) {
    if (!value) {
      this.taskID = null;
    }
  }

  public String getOwlsURI() {
    return this.owlsURI;
  }

  public TaskInfo setOwlsURI(String owlsURI) {
    this.owlsURI = owlsURI;
    return this;
  }

  public void unsetOwlsURI() {
    this.owlsURI = null;
  }

  /** Returns true if field owlsURI is set (has been assigned a value) and false otherwise */
  public boolean isSetOwlsURI() {
    return this.owlsURI != null;
  }

  public void setOwlsURIIsSet(boolean value) {
    if (!value) {
      this.owlsURI = null;
    }
  }

  public String getOwlsContent() {
    return this.owlsContent;
  }

  public TaskInfo setOwlsContent(String owlsContent) {
    this.owlsContent = owlsContent;
    return this;
  }

  public void unsetOwlsContent() {
    this.owlsContent = null;
  }

  /** Returns true if field owlsContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOwlsContent() {
    return this.owlsContent != null;
  }

  public void setOwlsContentIsSet(boolean value) {
    if (!value) {
      this.owlsContent = null;
    }
  }

  public ProfileInfo getProfileInfo() {
    return this.profileInfo;
  }

  public TaskInfo setProfileInfo(ProfileInfo profileInfo) {
    this.profileInfo = profileInfo;
    return this;
  }

  public void unsetProfileInfo() {
    this.profileInfo = null;
  }

  /** Returns true if field profileInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileInfo() {
    return this.profileInfo != null;
  }

  public void setProfileInfoIsSet(boolean value) {
    if (!value) {
      this.profileInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskID();
      } else {
        setTaskID((String)value);
      }
      break;

    case OWLS_URI:
      if (value == null) {
        unsetOwlsURI();
      } else {
        setOwlsURI((String)value);
      }
      break;

    case OWLS_CONTENT:
      if (value == null) {
        unsetOwlsContent();
      } else {
        setOwlsContent((String)value);
      }
      break;

    case PROFILE_INFO:
      if (value == null) {
        unsetProfileInfo();
      } else {
        setProfileInfo((ProfileInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskID();

    case OWLS_URI:
      return getOwlsURI();

    case OWLS_CONTENT:
      return getOwlsContent();

    case PROFILE_INFO:
      return getProfileInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskID();
    case OWLS_URI:
      return isSetOwlsURI();
    case OWLS_CONTENT:
      return isSetOwlsContent();
    case PROFILE_INFO:
      return isSetProfileInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskInfo)
      return this.equals((TaskInfo)that);
    return false;
  }

  public boolean equals(TaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_taskID = true && this.isSetTaskID();
    boolean that_present_taskID = true && that.isSetTaskID();
    if (this_present_taskID || that_present_taskID) {
      if (!(this_present_taskID && that_present_taskID))
        return false;
      if (!this.taskID.equals(that.taskID))
        return false;
    }

    boolean this_present_owlsURI = true && this.isSetOwlsURI();
    boolean that_present_owlsURI = true && that.isSetOwlsURI();
    if (this_present_owlsURI || that_present_owlsURI) {
      if (!(this_present_owlsURI && that_present_owlsURI))
        return false;
      if (!this.owlsURI.equals(that.owlsURI))
        return false;
    }

    boolean this_present_owlsContent = true && this.isSetOwlsContent();
    boolean that_present_owlsContent = true && that.isSetOwlsContent();
    if (this_present_owlsContent || that_present_owlsContent) {
      if (!(this_present_owlsContent && that_present_owlsContent))
        return false;
      if (!this.owlsContent.equals(that.owlsContent))
        return false;
    }

    boolean this_present_profileInfo = true && this.isSetProfileInfo();
    boolean that_present_profileInfo = true && that.isSetProfileInfo();
    if (this_present_profileInfo || that_present_profileInfo) {
      if (!(this_present_profileInfo && that_present_profileInfo))
        return false;
      if (!this.profileInfo.equals(that.profileInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TaskInfo typedOther = (TaskInfo)other;

    lastComparison = Boolean.valueOf(isSetTaskID()).compareTo(typedOther.isSetTaskID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskID, typedOther.taskID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwlsURI()).compareTo(typedOther.isSetOwlsURI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwlsURI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owlsURI, typedOther.owlsURI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwlsContent()).compareTo(typedOther.isSetOwlsContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwlsContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owlsContent, typedOther.owlsContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileInfo()).compareTo(typedOther.isSetProfileInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileInfo, typedOther.profileInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskInfo(");
    boolean first = true;

    sb.append("taskID:");
    if (this.taskID == null) {
      sb.append("null");
    } else {
      sb.append(this.taskID);
    }
    first = false;
    if (isSetOwlsURI()) {
      if (!first) sb.append(", ");
      sb.append("owlsURI:");
      if (this.owlsURI == null) {
        sb.append("null");
      } else {
        sb.append(this.owlsURI);
      }
      first = false;
    }
    if (isSetOwlsContent()) {
      if (!first) sb.append(", ");
      sb.append("owlsContent:");
      if (this.owlsContent == null) {
        sb.append("null");
      } else {
        sb.append(this.owlsContent);
      }
      first = false;
    }
    if (isSetProfileInfo()) {
      if (!first) sb.append(", ");
      sb.append("profileInfo:");
      if (this.profileInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.profileInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskID' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (profileInfo != null) {
      profileInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskInfoStandardSchemeFactory implements SchemeFactory {
    public TaskInfoStandardScheme getScheme() {
      return new TaskInfoStandardScheme();
    }
  }

  private static class TaskInfoStandardScheme extends StandardScheme<TaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskID = iprot.readString();
              struct.setTaskIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWLS_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owlsURI = iprot.readString();
              struct.setOwlsURIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWLS_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owlsContent = iprot.readString();
              struct.setOwlsContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profileInfo = new ProfileInfo();
              struct.profileInfo.read(iprot);
              struct.setProfileInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskID != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.taskID);
        oprot.writeFieldEnd();
      }
      if (struct.owlsURI != null) {
        if (struct.isSetOwlsURI()) {
          oprot.writeFieldBegin(OWLS_URI_FIELD_DESC);
          oprot.writeString(struct.owlsURI);
          oprot.writeFieldEnd();
        }
      }
      if (struct.owlsContent != null) {
        if (struct.isSetOwlsContent()) {
          oprot.writeFieldBegin(OWLS_CONTENT_FIELD_DESC);
          oprot.writeString(struct.owlsContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.profileInfo != null) {
        if (struct.isSetProfileInfo()) {
          oprot.writeFieldBegin(PROFILE_INFO_FIELD_DESC);
          struct.profileInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskInfoTupleSchemeFactory implements SchemeFactory {
    public TaskInfoTupleScheme getScheme() {
      return new TaskInfoTupleScheme();
    }
  }

  private static class TaskInfoTupleScheme extends TupleScheme<TaskInfo> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.taskID);
      BitSet optionals = new BitSet();
      if (struct.isSetOwlsURI()) {
        optionals.set(0);
      }
      if (struct.isSetOwlsContent()) {
        optionals.set(1);
      }
      if (struct.isSetProfileInfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOwlsURI()) {
        oprot.writeString(struct.owlsURI);
      }
      if (struct.isSetOwlsContent()) {
        oprot.writeString(struct.owlsContent);
      }
      if (struct.isSetProfileInfo()) {
        struct.profileInfo.write(oprot);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskID = iprot.readString();
      struct.setTaskIDIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.owlsURI = iprot.readString();
        struct.setOwlsURIIsSet(true);
      }
      if (incoming.get(1)) {
        struct.owlsContent = iprot.readString();
        struct.setOwlsContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.profileInfo = new ProfileInfo();
        struct.profileInfo.read(iprot);
        struct.setProfileInfoIsSet(true);
      }
    }
  }

}

